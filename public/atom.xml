<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sherlock.heroku.com]]></title>
  <link href="http://sherlock.heroku.com/atom.xml" rel="self"/>
  <link href="http://sherlock.heroku.com/"/>
  <updated>2012-04-09T10:32:44-05:00</updated>
  <id>http://sherlock.heroku.com/</id>
  <author>
    <name><![CDATA[Thomas Dziedzic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[distribution vs language package managers]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/04/08/distribution-vs-language-package-managers/"/>
    <updated>2012-04-08T09:56:00-05:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/04/08/distribution-vs-language-package-managers</id>
    <content type="html"><![CDATA[<p>I have noticed a lot of confusion and differing views around which is better, using the distribution&#8217;s package manager or using the package manager that comes with a certain programming language.
I have thought about this problem a lot recently since I had to make some decisions about it recently.
This post is about my opinions on the topic.</p>

<p>I am for using a 3rd party package manager to manage packages provided by a 3rd party repository.
The following are reasons for using a 3rd party package manager:</p>

<ol>
<li>The 3rd party package manager already has access to the whole repository, so you will be able to install all the packages.</li>
<li>Upstream usually knows the best way or can be configured to act in the best interest of the user.</li>
<li>This lessens the burden of the distro package managers. Why repackage something that is already packaged?</li>
</ol>


<p>The first point states that since the 3rd party package manager was specifically built to access and install from the 3rd party repository (e.g. gem for rubygems), it will be able to install any package from that repository.
This is contrary to using the distro&#8217;s package manager, where package maintainers now have the burden to repackage all packages provided by the 3rd party repository.
In practice, I have yet to be shown a distro that successfully, and fully repackages a 3rd party repository that has it&#8217;s own package manager.
For example, debian provides a lot of official packages for rubygems, yet from my own personal experience, people who use ruby and debian actively avoid debian&#8217;s ruby&#8217;s gem packages because they are either too outdated or because there are some packages which haven&#8217;t been repackaged by debian.</p>

<p>The second point states that if you use the 3rd party package manager, you will most likely find the same behavior across all distros that use that package manager.
Upstream also can change and restructure formats and be able to easily adapt to the changes.
They are providing a common platform to access their repository across all distros.</p>

<p>The third and final point I have is that there would be a <em>huge</em> duplication of effort in my opinion if a distro decided to repackage a 3rd party repository successfully.
For example, rubygems.org has 2398 packages that would need to be packaged to provide the same coverage as you get from gem.
This means you will increase the amount of work per 3rd party repository by a huge amount.
Even if you were to automate recreating packages for you distro&#8217;s package manager, you would still have to take care of lots of edge cases where there are bugs or some kind of failures.</p>

<p>Another thing to consider is what happens when someone repackages the whole repository (or close to it) and then they leave.
This creates an unimaginable amount of old and useless packages.
A case like this already happened with archlinux a while ago with arch-haskell when the maintainers decided to stop updating archlinux&#8217;s packages that repackaged haskell&#8217;s packages.
Now there are about 1700 orphaned, useless, and outdated haskell packages in the AUR.</p>

<p>The only cases that I think justify repackaging a 3rd party package are:</p>

<ol>
<li>If you want to provide a certain program that is in the 3rd party repository that you can&#8217;t easily install using the 3rd party package manager.</li>
<li>It is a dependency of the first case.</li>
<li>There is no official, and obviously popular 3rd party package manager.</li>
</ol>


<p>The first point lets a maintainer choose certain important packages which might be hard to install or are critical for some applications.
As an example, the only package that I repackage for haskell is cabal-install which is the 3rd party package manager for haskell.
This will give people the option to easily install the 3rd party package manager which might not be obvious to install using other means.</p>

<p>The second point is a prerequisite for the first case, there&#8217;s usually no way around it if it&#8217;s a dependency.</p>

<p>The third point is to cover cases where the packages might have a central location, but it might not be the only place to get the packages from.
Also if the package manager doesn&#8217;t do a good job of building and cleanly installing the 3rd party packages.</p>

<p>I have been packaging python packages for a while, and have avoided using pip to install python packages, mainly because at the time when I was learning python, using pip wasn&#8217;t very popular.
I might consider switching over to it after doing some investigation into how it works and how it can be configured.</p>

<p>Hopefully this post helps others and helps me organize my thoughts on the topic.</p>

<p>Cheers!</p>

<p><strong>update:</strong>
I have reviewed the current situation with python and pip on archlinux and I prefer using pacman for python packages now.
The reason is that there are already so many well maintained python packages.
Also because pip doesn&#8217;t support a way to easily upgrade all the packages which is something pacman provides.
If it became more gem like providing the benefits of gem over pacman, I would consider using it for everything.
Basically there is almost no incentive for me to switch, and there is a loss of functionality if I switched.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby haskell changes in archlinux]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/04/08/ruby-haskell-changes-in-archlinux/"/>
    <updated>2012-04-08T00:33:00-05:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/04/08/ruby-haskell-changes-in-archlinux</id>
    <content type="html"><![CDATA[<p>Since the last post in this blog, I have been busy with cleaning up ruby and haskell support in archlinux.
Specifically changing the default gem install location for ruby and switching haskell away from the haskell-platform for archlinux.</p>

<p>The main change I have made to ruby was changing the default gem install location to ~/.gem/
This change is there to separate pacman installed gems which are installed to /usr/lib/ruby/gems/ and gem installed gems which are now installed to ~/.gem/
The transition has been rather smooth for such a major default change and there were expected problems, but no serious problems have occurred.
The main problem that some users faced was that they were unaware of the change, didn&#8217;t read the messages, and wondered why sudo gem install foo installed to /root/.gems/</p>

<p>For haskell, I mainly worked on first removing haskell-platform and all of its packages from the extra repository, and then upgrading ghc to the latest stable release.
Although most distros choose to use the haskell-platform, it makes less sense to do this in archlinux since it advertises itself as a rolling release distro which uses the latest stable version of software.
Dropping the haskell-platform has removed a lot of haskell packages from extra and has freed us from having to use the same ghc version as the haskell-platform.
The only packages remaining in extra are ghc and cabal-install along with their dependencies.
There have been a few problems that users encountered, but the most common was that they were unaware that the haskell-platform has been removed.
I did announce the removal, but some people just don&#8217;t read the mailing list.</p>

<p>Both of these changes are a step in the right direction for archlinux in my opinion.
Hopefully the changes make using these languages a better experience in the long run for arch users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[automating checking for new packages with crontab]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/04/automating-checking-for-new-package-with-crontab/"/>
    <updated>2012-02-04T21:30:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/04/automating-checking-for-new-package-with-crontab</id>
    <content type="html"><![CDATA[<p>You might have some command you repeatedly type to check its output.
I occasionally check for new package updates using tagurit and urlwatch which I mentioned in a previous post.
The problem is that it can get tedious running those commands over the terminal every day or week.
Let&#8217;s automate this.</p>

<p>Setting up cron to run a scheduled command is the perfect solution.
So let&#8217;s do it.</p>

<p>I will be doing this on archlinux but it should be the same on any computer with the same software installed.</p>

<p>First of all, you have to have the crond daemon running for this to work.
It is turned on by default on archlinux so we already have that working.</p>

<p>Next, we need to edit our crontab file by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ crontab -e</span></code></pre></td></tr></table></div></figure>


<p>Then for my example, I want to run urlwatch and tagurit every day at 6am and 6pm.
After I check crontab(5) to check the format of the file, I type the following in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 6,18 * * * urlwatch
</span><span class='line'>0 6,18 * * * tagurit</span></code></pre></td></tr></table></div></figure>


<p>This will run every day, every time our computer is turned on.
Cron will also send us a message to our local mail account if there is any output from the commands it ran.</p>

<p>Since I want it to deliver it to my gmail account, we first need to set up a postfix daemon to use gmail as a smtp relay host.
I covered that in a previous blog post.
I also covered how to set up a <em>~/.forward</em> file in the previous blog post in the bonus section.
The <em>~/.forward</em> file will route all our local messages to the specified email.
If you haven&#8217;t done so already, please set that up.</p>

<p>You should now be automatically running and receiving commands via cron!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setting up postfix to use gmail as a smtp relay host in archlinux]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/03/setting-up-postfix-to-use-gmail-as-an-smtp-relay-host-in-archlinux/"/>
    <updated>2012-02-03T10:55:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/03/setting-up-postfix-to-use-gmail-as-an-smtp-relay-host-in-archlinux</id>
    <content type="html"><![CDATA[<p>Setting up a MTA (mail transfer agent) to use gmail as a smtp relay host seemed to be a daunting task for me.
The amount of options you can configure postfix with would fill up a book.</p>

<p>I came across Matthew Hawthorne&#8217;s <a href="http://mhawthorne.net/posts/postfix-configuring-gmail-as-relay.html">excellent post</a> on how to do exactly this.
I will repeat his post here, modifying it slightly for archlinux.</p>

<p>Step 1, let&#8217;s install postfix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># pacman -S postfix</span></code></pre></td></tr></table></div></figure>


<p>Step 2, append the following to <em>/etc/postfix/main.cf</em> which will configure postfix for use with gmail.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sets gmail as relay
</span><span class='line'>relayhost = [smtp.gmail.com]:587
</span><span class='line'>
</span><span class='line'>#  use tls
</span><span class='line'>smtp_use_tls=yes
</span><span class='line'>
</span><span class='line'># use sasl when authenticating to foreign SMTP servers
</span><span class='line'>smtp_sasl_auth_enable = yes 
</span><span class='line'>
</span><span class='line'># path to password map file
</span><span class='line'>smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
</span><span class='line'>
</span><span class='line'># list of CAs to trust when verifying server certificate
</span><span class='line'>smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
</span><span class='line'>
</span><span class='line'># eliminates default security options which are incompatible with gmail
</span><span class='line'>smtp_sasl_security_options =</span></code></pre></td></tr></table></div></figure>


<p>Step 3, create a file <em>/etc/postfix/sasl_passwd</em> and add your gmail credentials.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[smtp.gmail.com]:587  username:password</span></code></pre></td></tr></table></div></figure>


<p>Step 4, create a postfix lookup table at <em>/etc/postfix/sasl_passwd.db</em> by running the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># postmap /etc/postfix/sasl_passwd</span></code></pre></td></tr></table></div></figure>


<p>Step 5, start the postfix daemon.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rc.d start postfix</span></code></pre></td></tr></table></div></figure>


<p>Step 6, run the following command to test.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo 'hello world!' | mail -s 'first email' username@gmail.com</span></code></pre></td></tr></table></div></figure>


<p>If you set up everything correctly, you should have sent out an email out to <em>username@gmail.com</em>.</p>

<p>Bonus: you can control where your local mail gets forwarded to by creating a <em>~/.forward</em> file and adding your email to the file so that local mail will get sent to your email account.
Check out the man page for aliases(5) for more info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage your dotfiles with deploydots]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/02/manage-your-dotfiles-with-deploydots/"/>
    <updated>2012-02-02T10:26:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/02/manage-your-dotfiles-with-deploydots</id>
    <content type="html"><![CDATA[<p>I recently folded in and joined the masses that manage their dotfiles through git.
There were many available tools, but I was surprised that none of the tools for managing your dotfiles folder did what I wanted:</p>

<ol>
<li>I wanted a seperate tool.</li>
<li>Symlinking files, making folders.</li>
<li>Have the toplevel files in the dotfiles folder not have a &#8216;.&#8217; in front of them.</li>
</ol>


<p>For the 1st point, I wanted this to be able to have a definitive source to get the tool instead of having to rely on a homegrown script put into the directory as an afterthought.
The 2nd point was to keep ~/dotfiles from getting cluttered with temporary files, logs, and such.
The 3rd point is so that I can simply run &#8220;ls&#8221; to see the available folders.
An added benefit from the 3rd point was that ~/.git wouldn&#8217;t conflict with ~/dotfiles/.git.</p>

<p>You can find deploydots at <a href="https://github.com/gostrc/deploydots">github</a>, and <a href="https://rubygems.org/gems/deploydots">rubygems</a>.</p>

<p>Also, you can find my dotfiles at <a href="https://github.com/gostrc/dotfiles">github</a>.</p>

<p>Side note for weechat users.
Weechat currently overwrites the symlinks every time you quit or save the config files.
I opened a task report for this behavior at the <a href="https://savannah.nongnu.org/task/?11779">weechat tracker</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watching for new tags in git and other VCSs]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/01/watching-for-new-tags-in-git-and-other-vcss/"/>
    <updated>2012-02-01T09:57:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/01/watching-for-new-tags-in-git-and-other-vcss</id>
    <content type="html"><![CDATA[<p><em>Background</em></p>

<p>As any packager will tell you, part of the work involves updating a package to the latest version.
This is especially true for a distro like <a href="http://www.archlinux.org/">archlinux</a> where it is known for its extremely up to date, stable packages.</p>

<p>I maintain a couple of packages for archlinux and it is important for me to check for new versions of a package.
When I first started packaging, I manually checked for new packages by going to the package&#8217;s website and verifying that there was no new version.
This got tedious, and repetitive very fast. This was about the time I came across <a href="http://thp.io/2008/urlwatch/">urlwatch</a>.</p>

<p>Urlwatch is a tool that watches websites and commands for changes since you last ran it.
This allowed you to initially take some time to set it up.
Then each subsequent run will fetch all the webpages and diff them against the previous versions it has in its cache.
This was better and made me actually want to check for new versions. Except this came with its own problems:</p>

<ol>
<li>Lots of false positives due to dynamic content (e.g., ratings, user comments, etc.)</li>
<li>You need to write filters on a per site basis to minimize false positives.</li>
<li>Mercurial (hg) repositories require you to have a full copy of the repository locally to list out all the tags.</li>
</ol>


<p>I know that upstream projects that use version control systems (git, svn, hg, &#8230;) usually create tags whenever they create a new release.
I realized that checking for new tags would probably be the best way to check for new package versions since you might even get notified before any news item is even released.</p>

<p><em>Tagurit</em></p>

<p>As a result of the above imperfections with urlwatch, I decided to write a small tool in ruby called tagurit.
One benefit this brought was simple configuration which meant you only had to paste the url to the repository and the tool does the rest.
The only false positives you will get with tagurit is when upstream tags development versions.</p>

<p>I use this tool quite often and it does its job perfectly.
There are still situations were something like urlwatch is required to check for new versions of a package:</p>

<ol>
<li>Upstream doesn&#8217;t use a version control system or doesn&#8217;t use tags.</li>
<li>Upstream uses an unsupported VCS (not git, svn, or hg).</li>
</ol>


<p>The 1st item can&#8217;t be addressed by me.
But the 2nd item exists because I don&#8217;t maintain any packages that use another VCS.
If you want support for a new VCS type that supports tags, I would be happy to look into it if you open a feature request on github.</p>

<p>Checkout tagurit on <a href="https://github.com/gostrc/tagurit">github</a>, or <a href="https://rubygems.org/gems/tagurit">rubygems</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Rocks]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/01/31/octopress-rocks/"/>
    <updated>2012-01-31T20:55:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/01/31/octopress-rocks</id>
    <content type="html"><![CDATA[<p>Just set up my blog with <a href="http://octopress.org/">octopress</a> following Sam de Freyssinet&#8217;s thorough <a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">blog post</a>.</p>

<p>One caveat when setting up octopress under archlinux is that when using code blocks in your post, you will get a pygments error when generating your post.
An elegant solution can be found at Max Gonzih&#8217;s <a href="http://blog.gonzih.org/blog/2011/09/21/fix-octopress-pygments-error-on-arch-linux/">blog post</a>.</p>
]]></content>
  </entry>
  
</feed>
