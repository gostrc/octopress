<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sherlock.heroku.com]]></title>
  <link href="http://sherlock.heroku.com/atom.xml" rel="self"/>
  <link href="http://sherlock.heroku.com/"/>
  <updated>2012-02-04T13:36:47-06:00</updated>
  <id>http://sherlock.heroku.com/</id>
  <author>
    <name><![CDATA[Thomas Dziedzic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[setting up postfix to use gmail as a smtp relay host in archlinux]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/03/setting-up-postfix-to-use-gmail-as-an-smtp-relay-host-in-archlinux/"/>
    <updated>2012-02-03T10:55:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/03/setting-up-postfix-to-use-gmail-as-an-smtp-relay-host-in-archlinux</id>
    <content type="html"><![CDATA[<p>Setting up a MTA (mail transfer agent) to use gmail as a smtp relay host seemed to be a daunting task for me.
The amount of options you can configure postfix with would fill up a book.</p>

<p>I came across Matthew Hawthorne&#8217;s <a href="http://mhawthorne.net/posts/postfix-configuring-gmail-as-relay.html">excellent post</a> on how to do exactly this.
I will repeat his post here, modifying it slightly for archlinux.</p>

<p>Step 1, let&#8217;s install postfix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># pacman -S postfix</span></code></pre></td></tr></table></div></figure>


<p>Step 2, append the following to <em>/etc/postfix/main.cf</em> which will configure postfix for use with gmail.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sets gmail as relay
</span><span class='line'>relayhost = [smtp.gmail.com]:587
</span><span class='line'>
</span><span class='line'>#  use tls
</span><span class='line'>smtp_use_tls=yes
</span><span class='line'>
</span><span class='line'># use sasl when authenticating to foreign SMTP servers
</span><span class='line'>smtp_sasl_auth_enable = yes 
</span><span class='line'>
</span><span class='line'># path to password map file
</span><span class='line'>smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
</span><span class='line'>
</span><span class='line'># list of CAs to trust when verifying server certificate
</span><span class='line'>smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
</span><span class='line'>
</span><span class='line'># eliminates default security options which are incompatible with gmail
</span><span class='line'>smtp_sasl_security_options =</span></code></pre></td></tr></table></div></figure>


<p>Step 3, create a file <em>/etc/postfix/sasl_passwd</em> and add your gmail credentials.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[smtp.gmail.com]:587  username:password</span></code></pre></td></tr></table></div></figure>


<p>Step 4, create a postfix lookup table at <em>/etc/postfix/sasl_passwd.db</em> by running the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># postmap /etc/postfix/sasl_passwd</span></code></pre></td></tr></table></div></figure>


<p>Step 5, start the postfix daemon.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rc.d start postfix</span></code></pre></td></tr></table></div></figure>


<p>Step 6, run the following command to test.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo 'hello world!' | mail -s 'first email' username@gmail.com</span></code></pre></td></tr></table></div></figure>


<p>If you set up everything correctly, you should have sent out an email out to <em>username@gmail.com</em>.</p>

<p>Bonus: you can control where your local mail gets forwarded to by creating a <em>~/.forward</em> file and adding your email to the file so that local mail will get sent to your email account.
Check out the man page for aliases(5) for more info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage your dotfiles with deploydots]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/02/manage-your-dotfiles-with-deploydots/"/>
    <updated>2012-02-02T10:26:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/02/manage-your-dotfiles-with-deploydots</id>
    <content type="html"><![CDATA[<p>I recently folded in and joined the masses that manage their dotfiles through git.
There were many available tools, but I was surprised that none of the tools for managing your dotfiles folder did what I wanted:</p>

<ol>
<li>I wanted a seperate tool.</li>
<li>Symlinking files, making folders.</li>
<li>Have the toplevel files in the dotfiles folder not have a &#8216;.&#8217; in front of them.</li>
</ol>


<p>For the 1st point, I wanted this to be able to have a definitive source to get the tool instead of having to rely on a homegrown script put into the directory as an afterthought.
The 2nd point was to keep ~/dotfiles from getting cluttered with temporary files, logs, and such.
The 3rd point is so that I can simply run &#8220;ls&#8221; to see the available folders.
An added benefit from the 3rd point was that ~/.git wouldn&#8217;t conflict with ~/dotfiles/.git.</p>

<p>You can find deploydots at <a href="https://github.com/gostrc/deploydots">github</a>, and <a href="https://rubygems.org/gems/deploydots">rubygems</a>.</p>

<p>Also, you can find my dotfiles at <a href="https://github.com/gostrc/dotfiles">github</a>.</p>

<p>Side note for weechat users.
Weechat currently overwrites the symlinks every time you quit or save the config files.
I opened a task report for this behavior at the <a href="https://savannah.nongnu.org/task/?11779">weechat tracker</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watching for new tags in git and other VCSs]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/02/01/watching-for-new-tags-in-git-and-other-vcss/"/>
    <updated>2012-02-01T09:57:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/02/01/watching-for-new-tags-in-git-and-other-vcss</id>
    <content type="html"><![CDATA[<p><em>Background</em></p>

<p>As any packager will tell you, part of the work involves updating a package to the latest version.
This is especially true for a distro like <a href="http://www.archlinux.org/">archlinux</a> where it is known for its extremely up to date, stable packages.</p>

<p>I maintain a couple of packages for archlinux and it is important for me to check for new versions of a package.
When I first started packaging, I manually checked for new packages by going to the package&#8217;s website and verifying that there was no new version.
This got tedious, and repetitive very fast. This was about the time I came across <a href="http://thp.io/2008/urlwatch/">urlwatch</a>.</p>

<p>Urlwatch is a tool that watches websites and commands for changes since you last ran it.
This allowed you to initially take some time to set it up.
Then each subsequent run will fetch all the webpages and diff them against the previous versions it has in its cache.
This was better and made me actually want to check for new versions. Except this came with its own problems:</p>

<ol>
<li>Lots of false positives due to dynamic content (e.g., ratings, user comments, etc.)</li>
<li>You need to write filters on a per site basis to minimize false positives.</li>
<li>Mercurial (hg) repositories require you to have a full copy of the repository locally to list out all the tags.</li>
</ol>


<p>I know that upstream projects that use version control systems (git, svn, hg, &#8230;) usually create tags whenever they create a new release.
I realized that checking for new tags would probably be the best way to check for new package versions since you might even get notified before any news item is even released.</p>

<p><em>Tagurit</em></p>

<p>As a result of the above imperfections with urlwatch, I decided to write a small tool in ruby called tagurit.
One benefit this brought was simple configuration which meant you only had to paste the url to the repository and the tool does the rest.
The only false positives you will get with tagurit is when upstream tags development versions.</p>

<p>I use this tool quite often and it does its job perfectly.
There are still situations were something like urlwatch is required to check for new versions of a package:</p>

<ol>
<li>Upstream doesn&#8217;t use a version control system or doesn&#8217;t use tags.</li>
<li>Upstream uses an unsupported VCS (not git, svn, or hg).</li>
</ol>


<p>The 1st item can&#8217;t be addressed by me.
But the 2nd item exists because I don&#8217;t maintain any packages that use another VCS.
If you want support for a new VCS type that supports tags, I would be happy to look into it if you open a feature request on github.</p>

<p>Checkout tagurit on <a href="https://github.com/gostrc/tagurit">github</a>, or <a href="https://rubygems.org/gems/tagurit">rubygems</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Rocks]]></title>
    <link href="http://sherlock.heroku.com/blog/2012/01/31/octopress-rocks/"/>
    <updated>2012-01-31T20:55:00-06:00</updated>
    <id>http://sherlock.heroku.com/blog/2012/01/31/octopress-rocks</id>
    <content type="html"><![CDATA[<p>Just set up my blog with <a href="http://octopress.org/">octopress</a> following Sam de Freyssinet&#8217;s thorough <a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku">blog post</a>.</p>

<p>One caveat when setting up octopress under archlinux is that when using code blocks in your post, you will get a pygments error when generating your post.
An elegant solution can be found at Max Gonzih&#8217;s <a href="http://blog.gonzih.org/blog/2011/09/21/fix-octopress-pygments-error-on-arch-linux/">blog post</a>.</p>
]]></content>
  </entry>
  
</feed>
